// Generated by CoffeeScript 1.3.3
var VST_LOADED, bring_to_back, bring_to_top, check_time_conflict, click_event, dehighlight, delete_sect, generate_table, get_random_color, go_to, highlight, hsv_to_rgb, process_datetime, tc, tt, visable,
  __hasProp = {}.hasOwnProperty;

if (!VST_LOADED) {
  tt = [[], [], [], [], [], [], []];
  tc = [[], [], [], [], [], [], []];
  visable = true;
  go_to = function(dept, ccode) {
    var semcode, url;
    if (ccode == null) {
      ccode = '';
    }
    dept = dept.toUpperCase();
    semcode = window.location.href.match(/https:\/\/w5.ab.ust.hk\/wcq\/cgi-bin\/(\d+)\//)[1];
    url = "https://w5.ab.ust.hk/wcq/cgi-bin/" + semcode + "/subject/" + dept;
    $('div#classes').load(url + ' div#classes', function() {
      document.title = dept + document.title.slice(4);
      $('tr.sectodd, tr.secteven').unbind('click').click(click_event);
      if (!ccode) {
        return $('body').scrollTop(0);
      } else {
        return $(window).scrollTop($("a[name=" + (dept + ccode) + "]").offset().top - navHeight);
      }
    });
    return false;
  };
  hsv_to_rgb = function(h, s, v) {
    var b, f, g, h_i, p, q, r, rgb, t, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    h_i = Math.floor(h * 6);
    f = h * 6 - h_i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    if (h_i === 0) {
      _ref = [v, t, p], r = _ref[0], g = _ref[1], b = _ref[2];
    }
    if (h_i === 1) {
      _ref1 = [q, v, p], r = _ref1[0], g = _ref1[1], b = _ref1[2];
    }
    if (h_i === 2) {
      _ref2 = [p, v, t], r = _ref2[0], g = _ref2[1], b = _ref2[2];
    }
    if (h_i === 3) {
      _ref3 = [p, q, v], r = _ref3[0], g = _ref3[1], b = _ref3[2];
    }
    if (h_i === 4) {
      _ref4 = [t, p, v], r = _ref4[0], g = _ref4[1], b = _ref4[2];
    }
    if (h_i === 5) {
      _ref5 = [v, p, q], r = _ref5[0], g = _ref5[1], b = _ref5[2];
    }
    return rgb = [Math.floor(r * 256), Math.floor(g * 256), Math.floor(b * 256)];
  };
  get_random_color = function() {
    /*
                based on http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
    */

    var color, golden_ratio_conjugate, h, rgb;
    golden_ratio_conjugate = 0.618033988749895;
    h = Math.random();
    h += golden_ratio_conjugate;
    h %= 1;
    rgb = hsv_to_rgb(h, 0.3, 0.99);
    return color = "#" + rgb[0].toString(16) + rgb[1].toString(16) + rgb[2].toString(16);
  };
  check_time_conflict = function(t1, t2) {
    var _ref, _ref1, _ref2, _ref3;
    if (((t2.start_time <= (_ref = t1.start_time) && _ref <= t2.end_time)) || ((t2.start_time <= (_ref1 = t1.end_time) && _ref1 <= t2.end_time)) || ((t1.start_time <= (_ref2 = t2.start_time) && _ref2 <= t1.end_time)) || ((t1.start_time <= (_ref3 = t2.end_time) && _ref3 <= t1.end_time))) {
      return true;
    } else {
      return false;
    }
  };
  process_datetime = function(dt, room, section, ccode, color) {
    var ETapm, EThh, ETmm, STapm, SThh, STmm, dow, end_time, evens, i, mapping, parts, result, start_time, x, _i, _len, _ref, _ref1;
    if (dt === 'TBA') {
      return [];
    }
    result = [];
    mapping = {
      'Mo': 0,
      'Tu': 1,
      'We': 2,
      'Th': 3,
      'Fr': 4,
      'Sa': 5,
      'Su': 6
    };
    parts = dt.split(' ');
    parts.splice(2, 1);
    STapm = parts[1].slice(-2);
    _ref = parts[1].slice(0, -2).split(':'), SThh = _ref[0], STmm = _ref[1];
    if (STapm === 'PM' && SThh !== '12') {
      start_time = (parseInt(SThh, 10) + 12) * 2;
    } else {
      start_time = (parseInt(SThh, 10)) * 2;
    }
    if (STmm === '30') {
      start_time += 1;
    }
    ETapm = parts[2].slice(-2);
    _ref1 = parts[2].slice(0, -2).split(':'), EThh = _ref1[0], ETmm = _ref1[1];
    if (ETapm === 'PM' && EThh !== '12') {
      end_time = (parseInt(EThh, 10) + 12) * 2;
    } else {
      end_time = (parseInt(EThh, 10)) * 2;
    }
    if (ETmm === '50') {
      end_time += 1;
    }
    evens = (function() {
      var _i, _ref2, _results;
      _results = [];
      for (x = _i = 0, _ref2 = parts[0].length; _i < _ref2; x = _i += 2) {
        _results.push(x);
      }
      return _results;
    })();
    for (_i = 0, _len = evens.length; _i < _len; _i++) {
      i = evens[_i];
      dow = mapping[parts[0].slice(i, (i + 1) + 1 || 9e9)];
      result.push({
        dow: dow,
        start_time: start_time,
        end_time: end_time,
        room: room,
        section: section,
        ccode: ccode,
        color: color
      });
    }
    return result;
  };
  click_event = function() {
    var $first_row, $rest, $row, $rows, course_code, course_color, course_name, datetime, l, lesson, no_time_conflict, room, sect, section, td_arr, timeslots, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;
    if (!visable) {
      return;
    }
    if (typeof console !== "undefined" && console !== null) {
      console.log("click event fired");
    }
    tc = [[], [], [], [], [], [], []];
    if (typeof console !== "undefined" && console !== null) {
      console.log(this);
    }
    timeslots = [];
    course_name = $(this).parents('.course').find('h2').text();
    course_code = course_name.slice(0, course_name.indexOf('-') - 1);
    course_color = get_random_color();
    $first_row = $(this);
    if (!$first_row.is('.newsect')) {
      $first_row = $first_row.prevAll('.newsect:first');
    }
    sect = $first_row.find('td:first').text();
    $rows = [$first_row];
    $rest = $first_row.nextUntil('.newsect');
    if ($rest.length) {
      $rows = $rows.concat($rest.clone().prepend("<td>" + sect + "</td>"));
    }
    for (_i = 0, _len = $rows.length; _i < _len; _i++) {
      $row = $rows[_i];
      td_arr = $row.find('td').map(function() {
        return $(this).text();
      }).get();
      section = td_arr[0], datetime = td_arr[1], room = td_arr[2];
      if (datetime.match(/\d{2}\-\w{3}\-\d{4} \- \d{2}\-\w{3}\-\d{4}/)) {
        datetime = datetime.slice(25);
      }
      timeslots = timeslots.concat(process_datetime(datetime, room, section, course_code, course_color));
    }
    no_time_conflict = true;
    for (_j = 0, _len1 = timeslots.length; _j < _len1; _j++) {
      lesson = timeslots[_j];
      _ref = tt[lesson.dow];
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        l = _ref[_k];
        if (check_time_conflict(l, lesson)) {
          no_time_conflict = false;
        }
      }
    }
    if (!no_time_conflict) {
      for (_l = 0, _len3 = timeslots.length; _l < _len3; _l++) {
        lesson = timeslots[_l];
        tc[lesson.dow].push(lesson);
      }
    } else {
      for (_m = 0, _len4 = timeslots.length; _m < _len4; _m++) {
        lesson = timeslots[_m];
        tt[lesson.dow].push(lesson);
      }
    }
    generate_table();
    return false;
  };
  delete_sect = function(sect) {
    var dow, l, temp_arr, _i, _j, _len, _ref;
    if (typeof console !== "undefined" && console !== null) {
      console.log(sect);
    }
    for (dow = _i = 0; _i <= 6; dow = ++_i) {
      temp_arr = [];
      _ref = tt[dow];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        l = _ref[_j];
        if (l.section !== sect) {
          temp_arr.push(l);
        }
      }
      tt[dow] = temp_arr.slice(0);
    }
    generate_table();
    return false;
  };
  generate_table = function() {
    var D, DAYS, SAT, SAT_SUN, cell, cell_td, cell_td_text_node, col, done, dow, hr, k, l, max_time, min, min_time, row, tbl, tbl_row, tbl_thead, td, td_textnode, time_str, time_td, time_td_text_node, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _p, _q, _ref, _ref1, _ref2, _ref3, _ref4;
    max_time = 18;
    min_time = 18;
    for (dow = _i = 0; _i <= 6; dow = ++_i) {
      _ref = tt[dow];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        l = _ref[_j];
        if (l.end_time > max_time) {
          max_time = l.end_time;
        }
        if (l.start_time < min_time) {
          min_time = l.start_time;
        }
      }
    }
    for (dow = _k = 0; _k <= 6; dow = ++_k) {
      _ref1 = tc[dow];
      for (_l = 0, _len1 = _ref1.length; _l < _len1; _l++) {
        l = _ref1[_l];
        if (l.end_time > max_time) {
          max_time = l.end_time;
        }
        if (l.start_time < min_time) {
          min_time = l.start_time;
        }
      }
    }
    tbl = document.createElement('table');
    tbl.id = 'vst';
    tbl.style.border = 0;
    tbl.style.borderCollapse = 'collapse';
    DAYS = ['Time', 'MON', 'TUE', 'WED', 'THU', 'FRI'];
    SAT_SUN = tt[6].length !== 0 || tc[6].length !== 0;
    SAT = tt[5].length !== 0 || tc[5].length !== 0;
    if (SAT_SUN) {
      DAYS.push('SAT', 'SUN');
    } else if (SAT) {
      DAYS.push('SAT');
    }
    tbl_thead = document.createElement('thead');
    for (_m = 0, _len2 = DAYS.length; _m < _len2; _m++) {
      D = DAYS[_m];
      td = document.createElement('th');
      td_textnode = document.createTextNode(D);
      td.appendChild(td_textnode);
      tbl_thead.appendChild(td);
    }
    tbl.appendChild(tbl_thead);
    for (row = _n = min_time; min_time <= max_time ? _n <= max_time : _n >= max_time; row = min_time <= max_time ? ++_n : --_n) {
      hr = Math.floor(row / 2);
      if (hr <= 9) {
        hr = '0' + hr.toString();
      } else {
        hr = hr.toString();
      }
      min = row % 2;
      if (min === 0) {
        time_str = hr + ':00-' + hr + ':20';
      } else {
        time_str = hr + ':30-' + hr + ':50';
      }
      tbl_row = document.createElement('tr');
      time_td = document.createElement('td');
      time_td_text_node = document.createTextNode(time_str);
      time_td.appendChild(time_td_text_node);
      tbl_row.appendChild(time_td);
      for (col = _o = 0; _o <= 6; col = ++_o) {
        if (col === 5) {
          if (!(SAT_SUN || SAT)) {
            continue;
          }
        }
        if (col === 6) {
          if (!SAT_SUN) {
            continue;
          }
        }
        done = false;
        cell = {
          content: '---',
          js: '',
          css: {
            bgc: '',
            border: {
              Top: '',
              Left: '',
              Right: '',
              Bottom: ''
            }
          }
        };
        _ref2 = tt[col];
        for (_p = 0, _len3 = _ref2.length; _p < _len3; _p++) {
          l = _ref2[_p];
          if (done) {
            break;
          }
          if (l.start_time === row) {
            cell.css.border.Top = '1px solid black';
            cell.content = l.ccode;
            done = true;
          } else if ((l.start_time + 1) === row) {
            if ((l.start_time + 1) === l.end_time) {
              cell.css.border.Bottom = '1px solid black';
              cell.content = l.section.slice(0, l.section.indexOf(' '));
            } else {
              cell.content = l.section.slice(0, l.section.indexOf(' '));
            }
            done = true;
          } else if (row > l.start_time && row < l.end_time) {
            done = true;
            cell.content = '';
          } else if (l.end_time === row) {
            cell.css.border.Bottom = '1px solid black';
            cell.content = '';
            done = true;
          }
          if (done) {
            cell.js = (function(sect) {
              return function() {
                delete_sect(sect);
                return false;
              };
            })(l.section);
            cell.css.bgc = l.color;
            cell.css.border.Left = cell.css.border.Right = '1px solid black';
          }
        }
        _ref3 = tc[col];
        for (_q = 0, _len4 = _ref3.length; _q < _len4; _q++) {
          l = _ref3[_q];
          if (row === l.start_time) {
            cell.css.border.Top = '2px dashed red';
            cell.css.border.Left = cell.css.border.Right = '2px dashed red';
          } else if (row > l.start_time && row < l.end_time) {
            cell.css.border.Left = cell.css.border.Right = '2px dashed red';
          } else if (row === l.end_time) {
            cell.css.border.Left = cell.css.border.Right = '2px dashed red';
            cell.css.border.Bottom = '2px dashed red';
          }
        }
        cell_td = document.createElement('td');
        cell_td_text_node = document.createTextNode(cell.content);
        cell_td.appendChild(cell_td_text_node);
        if (cell.css.bgc) {
          cell_td.style.backgroundColor = cell.css.bgc;
        }
        _ref4 = cell.css.border;
        for (k in _ref4) {
          if (!__hasProp.call(_ref4, k)) continue;
          v = _ref4[k];
          if (cell.css.border[k]) {
            cell_td.style['border' + k] = v;
          }
        }
        if (cell.js) {
          $(cell_td).click(cell.js);
        }
        tbl_row.appendChild(cell_td);
      }
      tbl.appendChild(tbl_row);
    }
    $('#container').empty().append(tbl);
    return false;
  };
  /*
          ENTRY POINT
  */

  $("<div id=\"myTimetable\" style=\"background-color: #FFF; border: 2px solid #D4E0EC; padding: 0px; position: fixed; right: 0; bottom: 0; z-index: 1000; \">\n    <div id=\"container\"></div>\n    <a href=\"#\" id=\"toggle_show\">show/hide</a>\n</div>").appendTo('body');
  $('#toggle_show').click(function() {
    $('#container').toggle();
    visable = !visable;
    return false;
  });
  highlight = function() {
    return this.style.border = "2px solid yellow";
  };
  dehighlight = function() {
    return this.style.border = "0";
  };
  $('tr.sectodd, tr.secteven').click(click_event);
  bring_to_top = function() {
    return this.style.zIndex = 9999;
  };
  bring_to_back = function() {
    return this.style.zIndex = 500;
  };
  $('div#navigator').hover(bring_to_top, bring_to_back).find('div.depts').find('a').click(function() {
    var _this = this;
    $('div#classes').load(this.href + ' div#classes', function() {
      document.title = _this.href.slice(-4) + document.title.slice(4);
      $('tr.sectodd, tr.secteven').unbind('click').click(click_event);
      $('body').scrollTop(0);
      return false;
    });
    return false;
  });
  VST_LOADED = true;
} else {
  alert("VST already loaded");
}
